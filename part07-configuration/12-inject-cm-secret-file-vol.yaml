apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.properties: |
    app.name=MyApp
    app.port=8080

---

apiVersion: v1
kind: Pod
metadata:
  name: configmap-volume-pod
spec:
  restartPolicy: Never
  containers:
  - name: ubuntu
    image: ubuntu
    command: ["/bin/bash", "-c"]
    args:
      - echo "Reading from ConfigMap file..."; 
        cat /etc/config/app.properties; 
        sleep 3600;
    volumeMounts:
    - name: config-volume
      mountPath: "/etc/config"
      readOnly: true
  volumes:
  - name: config-volume
    configMap:
      name: app-config

# ConfigMap named app-config holds a file-like key called app.properties
# Pod mounts that config file into /etc/config/app.properties
# On start, it prints the content and sleeps

# => kubectl apply -f configmap-volume-demo.yaml
# => kubectl logs configmap-volume-pod

# Reading from ConfigMap file...
# app.name=MyApp
# app.port=8080

---

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: cHJhc2hhbnQ=     # "prashant" base64
  password: YWRtaW4xMjM=     # "admin123" base64

---

apiVersion: v1
kind: Pod
metadata:
  name: secret-volume-pod
spec:
  restartPolicy: Never
  containers:
  - name: ubuntu
    image: ubuntu
    command: ["/bin/sh", "-c"]
    args:
      - echo "Reading from file..."; 
        cat /etc/secret/username; 
        echo ""; 
        cat /etc/secret/password; 
        sleep 3600;
    volumeMounts: # this is a part of conatonater 
    - name: secret-volume
      mountPath: "/etc/secret"
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: my-secret

# Creates a secret called my-secret with username and password.
# Mounts that secret as files inside the pod at /etc/secret/
# The files:
# /etc/secret/username → contains prashant
# /etc/secret/password → contains admin123
# The container runs cat to display both values.      

# => kubectl apply -f secret-volume-demo.yaml
# => kubectl logs secret-volume-pod




